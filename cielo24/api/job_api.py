"""
    Cielo24

    The cielo24 Web Services Platform API allows developers to easily integrate transcription, captioning and keyword extraction into their applications without having to use a manual web portal.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: devs@cielo24.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from cielo24.api_client import ApiClient, Endpoint as _Endpoint
from cielo24.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from cielo24.model.add_media_response import AddMediaResponse
from cielo24.model.error_response import ErrorResponse
from cielo24.model.new_job_body import NewJobBody
from cielo24.model.new_job_response import NewJobResponse
from cielo24.model.perform_transcription_body import PerformTranscriptionBody
from cielo24.model.perform_transcription_response import PerformTranscriptionResponse


class JobApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_media_file_endpoint = _Endpoint(
            settings={
                'response_type': (AddMediaResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/job/add_media',
                'operation_id': 'add_media_file',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'v',
                    'job_id',
                    'content_length',
                    'body',
                    'is_duplicate',
                ],
                'required': [
                    'v',
                    'job_id',
                    'content_length',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                    'is_duplicate',
                ],
                'validation': [
                    'content_length',
                ]
            },
            root_map={
                'validations': {
                    ('content_length',): {

                        'inclusive_maximum': 10737418239,
                    },
                },
                'allowed_values': {
                    ('is_duplicate',): {

                        "TRUE": "true",
                        "FALSE": "false"
                    },
                },
                'openapi_types': {
                    'v':
                        (int,),
                    'job_id':
                        (str,),
                    'content_length':
                        (int,),
                    'body':
                        (file_type,),
                    'is_duplicate':
                        (str,),
                },
                'attribute_map': {
                    'v': 'v',
                    'job_id': 'job_id',
                    'content_length': 'Content-Length',
                    'is_duplicate': 'is_duplicate',
                },
                'location_map': {
                    'v': 'query',
                    'job_id': 'query',
                    'content_length': 'header',
                    'body': 'body',
                    'is_duplicate': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'video/mp4'
                ]
            },
            api_client=api_client
        )
        self.add_media_url_endpoint = _Endpoint(
            settings={
                'response_type': (AddMediaResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/job/add_media',
                'operation_id': 'add_media_url',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'v',
                    'job_id',
                    'media_url',
                    'is_duplicate',
                ],
                'required': [
                    'v',
                    'job_id',
                    'media_url',
                ],
                'nullable': [
                ],
                'enum': [
                    'is_duplicate',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('is_duplicate',): {

                        "TRUE": "true",
                        "FALSE": "false"
                    },
                },
                'openapi_types': {
                    'v':
                        (int,),
                    'job_id':
                        (str,),
                    'media_url':
                        (str,),
                    'is_duplicate':
                        (str,),
                },
                'attribute_map': {
                    'v': 'v',
                    'job_id': 'job_id',
                    'media_url': 'media_url',
                    'is_duplicate': 'is_duplicate',
                },
                'location_map': {
                    'v': 'query',
                    'job_id': 'query',
                    'media_url': 'query',
                    'is_duplicate': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.authorize_job_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/job/authorize',
                'operation_id': 'authorize_job',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'v',
                    'job_id',
                ],
                'required': [
                    'v',
                    'job_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'v':
                        (int,),
                    'job_id':
                        (str,),
                },
                'attribute_map': {
                    'v': 'v',
                    'job_id': 'job_id',
                },
                'location_map': {
                    'v': 'query',
                    'job_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.new_job_endpoint = _Endpoint(
            settings={
                'response_type': (NewJobResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/job/new',
                'operation_id': 'new_job',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'v',
                    'new_job_body',
                ],
                'required': [
                    'v',
                    'new_job_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'v':
                        (int,),
                    'new_job_body':
                        (NewJobBody,),
                },
                'attribute_map': {
                    'v': 'v',
                },
                'location_map': {
                    'v': 'query',
                    'new_job_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.perform_transcription_endpoint = _Endpoint(
            settings={
                'response_type': (PerformTranscriptionResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/job/perform_transcription',
                'operation_id': 'perform_transcription',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'v',
                    'perform_transcription_body',
                ],
                'required': [
                    'v',
                    'perform_transcription_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'v':
                        (int,),
                    'perform_transcription_body':
                        (PerformTranscriptionBody,),
                },
                'attribute_map': {
                    'v': 'v',
                },
                'location_map': {
                    'v': 'query',
                    'perform_transcription_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def add_media_file(
        self,
        job_id,
        content_length,
        body,
        v=1,
        **kwargs
    ):
        """add_media_file  # noqa: E501

        Add a piece of media to an existing job using a local file. No content-type should be included in the HTTP header. The media should be uploaded as raw binary, no encoding (base64, hex, etc) is required. Chunk-transfer encoding is NOT supported. File size is limited to 10 gb  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_media_file(job_id, content_length, body, v=1, async_req=True)
        >>> result = thread.get()

        Args:
            job_id (str):
            content_length (int):
            body (file_type):
            v (int): defaults to 1, must be one of [1]

        Keyword Args:
            is_duplicate (str): [optional] if omitted the server will use the default value of "false"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddMediaResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['v'] = \
            v
        kwargs['job_id'] = \
            job_id
        kwargs['content_length'] = \
            content_length
        kwargs['body'] = \
            body
        return self.add_media_file_endpoint.call_with_http_info(**kwargs)

    def add_media_url(
        self,
        job_id,
        media_url,
        v=1,
        **kwargs
    ):
        """add_media_url  # noqa: E501

        Add a piece of media to an existing job using a public media url. A job may only have a single piece of media associated with it, attempting to add additional media will return an error code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_media_url(job_id, media_url, v=1, async_req=True)
        >>> result = thread.get()

        Args:
            job_id (str):
            media_url (str):
            v (int): defaults to 1, must be one of [1]

        Keyword Args:
            is_duplicate (str): [optional] if omitted the server will use the default value of "false"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddMediaResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['v'] = \
            v
        kwargs['job_id'] = \
            job_id
        kwargs['media_url'] = \
            media_url
        return self.add_media_url_endpoint.call_with_http_info(**kwargs)

    def authorize_job(
        self,
        job_id,
        v=1,
        **kwargs
    ):
        """authorize_job  # noqa: E501

        Authorize an existing job. If your account has the \"customer authorization\" feature enabled (it is not enabled by default) jobs you create will be held in the \"Authorizing\" state until you call this method. Calling this method on a job that is not the \"Authorizing\" state has no effect and will return success. Please contact support@cielo24.com to enable the \"customer authorization\" feature.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.authorize_job(job_id, v=1, async_req=True)
        >>> result = thread.get()

        Args:
            job_id (str):
            v (int): defaults to 1, must be one of [1]

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['v'] = \
            v
        kwargs['job_id'] = \
            job_id
        return self.authorize_job_endpoint.call_with_http_info(**kwargs)

    def new_job(
        self,
        new_job_body,
        v=1,
        **kwargs
    ):
        """new_job  # noqa: E501

        Create a new job. A job is a container into which you can upload media and request that transcription be performed. Creating a job is prerequisite for virtually all other methods.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.new_job(new_job_body, v=1, async_req=True)
        >>> result = thread.get()

        Args:
            new_job_body (NewJobBody):
            v (int): defaults to 1, must be one of [1]

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NewJobResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['v'] = \
            v
        kwargs['new_job_body'] = \
            new_job_body
        return self.new_job_endpoint.call_with_http_info(**kwargs)

    def perform_transcription(
        self,
        perform_transcription_body,
        v=1,
        **kwargs
    ):
        """perform_transcription  # noqa: E501

        Request that transcription be performed on the specified job. A callback URL, if specified, will be called when the transcription is complete. See [callback documentation](https://cielo24.readthedocs.io/en/latest/basics.html#callbacks-label) for details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.perform_transcription(perform_transcription_body, v=1, async_req=True)
        >>> result = thread.get()

        Args:
            perform_transcription_body (PerformTranscriptionBody):
            v (int): defaults to 1, must be one of [1]

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PerformTranscriptionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['v'] = \
            v
        kwargs['perform_transcription_body'] = \
            perform_transcription_body
        return self.perform_transcription_endpoint.call_with_http_info(**kwargs)

